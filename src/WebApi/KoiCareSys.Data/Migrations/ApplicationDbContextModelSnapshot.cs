// <auto-generated />
using System;
using KoiCareSys.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiCareSys.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("koicare")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiCareSys.Data.Models.DevelopmentStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("RequiredFoodAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("required_food_amount");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stage_name");

                    b.HasKey("Id");

                    b.ToTable("development_stage", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.FeedingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("FeedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("feed_at");

                    b.Property<decimal?>("FoodAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("food_amount");

                    b.Property<string>("FoodType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("food_type");

                    b.Property<Guid>("KoiId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("koi_id");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("KoiId");

                    b.ToTable("feeding_schedule", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Koi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breed");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img_url");

                    b.Property<DateOnly?>("InPondSince")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("in_pond_since");

                    b.Property<decimal?>("Length")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("origin");

                    b.Property<string>("Physique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("physique");

                    b.Property<Guid>("PondId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pond_id");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("purchase_price");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("Sex");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PondId");

                    b.ToTable("koi", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.KoiRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("DevelopmentStageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("development_stage_id");

                    b.Property<Guid>("KoiId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("koi_id");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("length");

                    b.Property<string>("Physique")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("physique");

                    b.Property<DateTime>("RecordAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("record_at");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("DevelopmentStageId");

                    b.HasIndex("KoiId");

                    b.ToTable("koi_record", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.MeasureData", b =>
                {
                    b.Property<Guid>("MeasureDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("MeasurementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("measurement_id");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("unit_id");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("volume");

                    b.HasKey("MeasureDataId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("UnitId");

                    b.ToTable("measure_data", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Measurement", b =>
                {
                    b.Property<Guid>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("measurement_id");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_record");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<Guid>("PondId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pond_id");

                    b.HasKey("MeasurementId");

                    b.HasIndex("PondId");

                    b.ToTable("measurement", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Pond", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("Depth")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("depth");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("DrainCount")
                        .HasColumnType("int")
                        .HasColumnName("drain_count");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img_url");

                    b.Property<bool?>("IsQualified")
                        .HasColumnType("bit")
                        .HasColumnName("is_qualified");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("PondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pond_name");

                    b.Property<decimal?>("PumpCapacity")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pump_capacity");

                    b.Property<int?>("SkimmerCount")
                        .HasColumnType("int")
                        .HasColumnName("skimmer_count");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("Volume")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("pond", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Unit", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("information");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_value");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("min_value");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_of_measure");

                    b.HasKey("UnitId");

                    b.ToTable("unit", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("user", "koicare");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.FeedingSchedule", b =>
                {
                    b.HasOne("KoiCareSys.Data.Models.Koi", "Koi")
                        .WithMany("FeedingSchedules")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Koi", b =>
                {
                    b.HasOne("KoiCareSys.Data.Models.Pond", "Pond")
                        .WithMany("Koi")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.KoiRecord", b =>
                {
                    b.HasOne("KoiCareSys.Data.Models.DevelopmentStage", "DevelopmentStage")
                        .WithMany("KoiRecords")
                        .HasForeignKey("DevelopmentStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiCareSys.Data.Models.Koi", "Koi")
                        .WithMany("KoiRecords")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevelopmentStage");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.MeasureData", b =>
                {
                    b.HasOne("KoiCareSys.Data.Models.Measurement", "Measurement")
                        .WithMany("MeasureData")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiCareSys.Data.Models.Unit", "Unit")
                        .WithMany("MeasureData")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Measurement", b =>
                {
                    b.HasOne("KoiCareSys.Data.Models.Pond", "Pond")
                        .WithMany("Measurements")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Pond", b =>
                {
                    b.HasOne("KoiCareSys.Data.Models.User", "User")
                        .WithMany("Ponds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.DevelopmentStage", b =>
                {
                    b.Navigation("KoiRecords");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Koi", b =>
                {
                    b.Navigation("FeedingSchedules");

                    b.Navigation("KoiRecords");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Measurement", b =>
                {
                    b.Navigation("MeasureData");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Pond", b =>
                {
                    b.Navigation("Koi");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.Unit", b =>
                {
                    b.Navigation("MeasureData");
                });

            modelBuilder.Entity("KoiCareSys.Data.Models.User", b =>
                {
                    b.Navigation("Ponds");
                });
#pragma warning restore 612, 618
        }
    }
}
